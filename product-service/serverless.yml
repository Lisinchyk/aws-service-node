service: product-service
app: product-service
frameworkVersion: "3"
useDotenv: true
provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  profile: "anatolii-aws"
  stage: dev
  environment:
    DB_NAME_PRODUCTS: ${env:DB_NAME_PRODUCTS}
    DB_NAME_STOCK: ${env:DB_NAME_STOCK}
    REGION: ${env:REGION}
    SQS_URL: SQSQueue
    CREATE_PRODUCT_TOPIC_ARN:
      Ref: SNSTopic

  iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:*
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DB_NAME_PRODUCTS}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DB_NAME_STOCK}"
    - Effect: Allow
      Action: sns:*
      Resource:
        - Fn::GetAtt:
            - SQSQueue
            - Arn
    - Effect: Allow
      Action: sns:*
      Resource:
       Ref: SNSTopic

plugins:
  - serverless-auto-swagger
  - serverless-webpack
custom:
  webpack:
    webpackConfig: webpack.config.js
    includeModules: true
  autoswagger:
    apiType: "httpApi"
    generateSwaggerOnDeploy: true
    typefiles: ["./src/models/types.ts"]
    title: "product-service"
    host: "z93dh321nh.execute-api.us-east-1.amazonaws.com/dev"

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          path: products
          method: get
          cors:
            origin: "*"
            allowCredentials: false
  getProductsById:
    handler: handler.getProductsById
    events:
      - http:
          path: products/{productId}
          method: get
          request:
            parameters:
              paths:
                productId: true
          cors:
            origin: "*"
            allowCredentials: false
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: products
          method: post
          responses:
            200:
              description: "New product was successfully created"
              bodyType: IProduct
          bodyType: IProduct
          cors:
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            origin: "*"
            allowCredentials: false
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt: [ SQSQueue, Arn ]

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: ${env:SUB_EMAIL_1}
        TopicArn:
          Ref: SNSTopic
    SNSExpensiveProductSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: ${env:SUB_EMAIL_2}
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          price: [ { "numeric": [ ">=", 10 ] } ]
  Outputs:
    SQSQueueOutput:
      Value:
        Fn::GetAtt: [ SQSQueue, Arn ]
      Export:
        Name: SQSQueueOutput